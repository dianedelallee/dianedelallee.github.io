I"z”<p>New year, new resolution, so today I have decided to play a bit with Docker, Django, Gunicorn and Nginx. So first we will create a Django in a Docker with a Postgres DB, and after we will add production environment and Nginx and Gunicorn. lets create the project</p>

<h2 id="lets-create-a-django-project">Lets create a Django project</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nb">mkdir </span>django-in-a-docker <span class="o">&amp;&amp;</span> <span class="nb">cd </span>django-in-a-docker
<span class="nb">mkdir </span>app <span class="o">&amp;&amp;</span> <span class="nb">cd </span>app
python3.7 <span class="nt">-m</span> venv <span class="nb">env
source env</span>/bin/activate
<span class="o">(</span><span class="nb">env</span><span class="o">)</span><span class="nv">$ </span>pip <span class="nb">install </span><span class="nv">django</span><span class="o">==</span>2.2.9
<span class="o">(</span><span class="nb">env</span><span class="o">)</span><span class="nv">$ </span>django-admin.py startproject hello_django <span class="nb">.</span>
<span class="o">(</span><span class="nb">env</span><span class="o">)</span><span class="nv">$ </span>python manage.py migrate
<span class="o">(</span><span class="nb">env</span><span class="o">)</span><span class="nv">$ </span>python manage.py runserver
</pre></td></tr></tbody></table></code></pre></div></div>

<p>if you navigate to <a href="http://localhost:8000/">http://localhost:8000/</a> you should see the Django welcome screen.
In order to put all our libraries in the same file, we will create a requirements.txt file which contains <code class="highlighter-rouge">Django==2.2.9</code>
As we will use Postgres, we can remove the db.sqlite file from the ‚Äúapp‚Äù directory. Now your Django project works, let continue a create the Docker files.</p>

<h2 id="start-to-play-with-docker">Start to play with Docker</h2>

<p>Now your project directory should look like that:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>django-in-a-docker
|<span class="se">\_</span> app
‚îú‚îÄ‚îÄ hello_django
‚îÇ ‚îú‚îÄ‚îÄ <span class="k">**</span>init<span class="k">**</span>.py
‚îÇ ‚îú‚îÄ‚îÄ settings.py
‚îÇ ‚îú‚îÄ‚îÄ urls.py
‚îÇ ‚îî‚îÄ‚îÄ wsgi.py
‚îú‚îÄ‚îÄ manage.py
‚îî‚îÄ‚îÄ requirements.txt
</pre></td></tr></tbody></table></code></pre></div></div>

<p>If you do not have Docker install please <a href="https://docs.docker.com/get-docker/">install Docker</a>. Then you create a Dockerfile to the app directory. And write the following configuration in it</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="c1"># pull official base image
</span><span class="n">FROM</span> <span class="n">python</span><span class="p">:</span><span class="mf">3.7</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="n">alpine</span>

<span class="c1"># set work directory
</span><span class="n">WORKDIR</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span>

<span class="c1"># set environment variables
</span><span class="n">ENV</span> <span class="n">PYTHONDONTWRITEBYTECODE</span> <span class="mi">1</span>
<span class="n">ENV</span> <span class="n">PYTHONUNBUFFERED</span> <span class="mi">1</span>

<span class="c1"># install dependencies
</span><span class="n">RUN</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="n">pip</span>
<span class="n">COPY</span> <span class="p">.</span><span class="o">/</span><span class="n">requirements</span><span class="p">.</span><span class="n">txt</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">requirements</span><span class="p">.</span><span class="n">txt</span>
<span class="n">RUN</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">r</span> <span class="n">requirements</span><span class="p">.</span><span class="n">txt</span>

<span class="c1"># copy project
</span><span class="n">COPY</span> <span class="p">.</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span><span class="o">/</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We are using an Alpine version of Docker for Python 3.7, and we set the working directory. We also update pip and install all the requirements.</p>

<p>Now we will need to define the docker-compose.yml file. Place it in the ‚Äúdjango-in-a-docker‚Äù directory (same level as the app directeory) and write that</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="n">version</span><span class="p">:</span> <span class="s">'3.7'</span>

<span class="n">services</span><span class="p">:</span>
<span class="n">web</span><span class="p">:</span>
<span class="n">build</span><span class="p">:</span> <span class="p">.</span><span class="o">/</span><span class="n">app</span>
<span class="n">command</span><span class="p">:</span> <span class="n">python</span> <span class="n">manage</span><span class="p">.</span><span class="n">py</span> <span class="n">runserver</span> <span class="mf">0.0</span><span class="p">.</span><span class="mf">0.0</span><span class="p">:</span><span class="mi">8000</span>
<span class="n">volumes</span><span class="p">:</span> <span class="o">-</span> <span class="p">.</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="p">:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span><span class="o">/</span>
<span class="n">ports</span><span class="p">:</span> <span class="o">-</span> <span class="mi">8000</span><span class="p">:</span><span class="mi">8000</span>
<span class="n">env_file</span><span class="p">:</span> <span class="o">-</span> <span class="p">.</span><span class="o">/</span><span class="p">.</span><span class="n">env</span><span class="p">.</span><span class="n">dev</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now we will update the SECRET_KEY, DEBUG and ALLOWED_HOSTS in settings.py to place them in a .env.dev file. This file should be in the ‚Äúdjango-in-a-docker‚Äù directory.
In your settings.py changeyour code by that:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="n">SECRET_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"SECRET_KEY"</span><span class="p">)</span>
<span class="n">DEBUG</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"DEBUG"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
<span class="n">ALLOWED_HOSTS</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"DJANGO_ALLOWED_HOSTS"</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="s">", "</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>and in the .env.dev</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>DEBUG=1
SECRET_KEY=my_anazing_secret_key
DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="lets-configure-our-postgres-db">Lets configure our Postgres DB</h2>

<p>To configure Postgres, we‚Äôll need to add a new service to the docker-compose.yml file, update the Django settings, and install Psycopg2. Lets update the docker-compose.yml</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="n">version</span><span class="p">:</span> <span class="s">'3.7'</span>

<span class="n">services</span><span class="p">:</span>
<span class="n">web</span><span class="p">:</span>
<span class="n">build</span><span class="p">:</span> <span class="p">.</span><span class="o">/</span><span class="n">app</span>
<span class="n">command</span><span class="p">:</span> <span class="n">python</span> <span class="n">manage</span><span class="p">.</span><span class="n">py</span> <span class="n">runserver</span> <span class="mf">0.0</span><span class="p">.</span><span class="mf">0.0</span><span class="p">:</span><span class="mi">8000</span>
<span class="n">volumes</span><span class="p">:</span> <span class="o">-</span> <span class="p">.</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="p">:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span><span class="o">/</span>
<span class="n">ports</span><span class="p">:</span> <span class="o">-</span> <span class="mi">8000</span><span class="p">:</span><span class="mi">8000</span>
<span class="n">env_file</span><span class="p">:</span> <span class="o">-</span> <span class="p">.</span><span class="o">/</span><span class="p">.</span><span class="n">env</span><span class="p">.</span><span class="n">dev</span>
<span class="n">depends_on</span><span class="p">:</span> <span class="o">-</span> <span class="n">db</span>
<span class="n">db</span><span class="p">:</span>
<span class="n">image</span><span class="p">:</span> <span class="n">postgres</span><span class="p">:</span><span class="mf">12.0</span><span class="o">-</span><span class="n">alpine</span>
<span class="n">volumes</span><span class="p">:</span> <span class="o">-</span> <span class="n">postgres_data</span><span class="p">:</span><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">postgresql</span><span class="o">/</span><span class="n">data</span><span class="o">/</span>
<span class="n">environment</span><span class="p">:</span> <span class="o">-</span> <span class="n">POSTGRES_USER</span><span class="o">=</span><span class="n">hello_django</span> <span class="o">-</span> <span class="n">POSTGRES_PASSWORD</span><span class="o">=</span><span class="n">hello_django</span> <span class="o">-</span> <span class="n">POSTGRES_DB</span><span class="o">=</span><span class="n">hello_django_dev</span>

<span class="n">volumes</span><span class="p">:</span>
<span class="n">postgres_data</span><span class="p">:</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We can also update the .env.dev file</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="n">DEBUG</span><span class="o">=</span><span class="mi">1</span>
<span class="n">SECRET_KEY</span><span class="o">=</span><span class="n">foo</span>
<span class="n">DJANGO_ALLOWED_HOSTS</span><span class="o">=</span><span class="n">localhost</span> <span class="mf">127.0</span><span class="p">.</span><span class="mf">0.1</span> <span class="p">[::</span><span class="mi">1</span><span class="p">]</span>
<span class="n">SQL_ENGINE</span><span class="o">=</span><span class="n">django</span><span class="p">.</span><span class="n">db</span><span class="p">.</span><span class="n">backends</span><span class="p">.</span><span class="n">postgresql</span>
<span class="n">SQL_DATABASE</span><span class="o">=</span><span class="n">hello_django_dev</span>
<span class="n">SQL_USER</span><span class="o">=</span><span class="n">hello_django</span>
<span class="n">SQL_PASSWORD</span><span class="o">=</span><span class="n">hello_django</span>
<span class="n">SQL_HOST</span><span class="o">=</span><span class="n">db</span>
<span class="n">SQL_PORT</span><span class="o">=</span><span class="mi">5432</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>In the settings.py we now need to update the DATABASES section. Replace it by</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"default"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s">"ENGINE"</span><span class="p">:</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"SQL_ENGINE"</span><span class="p">,</span> <span class="s">"django.db.backends.sqlite3"</span><span class="p">),</span>
    <span class="s">"NAME"</span><span class="p">:</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"SQL_DATABASE"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">"db.sqlite3"</span><span class="p">)),</span>
    <span class="s">"USER"</span><span class="p">:</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"SQL_USER"</span><span class="p">,</span> <span class="s">"user"</span><span class="p">),</span>
    <span class="s">"PASSWORD"</span><span class="p">:</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"SQL_PASSWORD"</span><span class="p">,</span> <span class="s">"password"</span><span class="p">),</span>
    <span class="s">"HOST"</span><span class="p">:</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"SQL_HOST"</span><span class="p">,</span> <span class="s">"localhost"</span><span class="p">),</span>
    <span class="s">"PORT"</span><span class="p">:</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"SQL_PORT"</span><span class="p">,</span> <span class="s">"5432"</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Lets update the Dockerfile to install Psycopg2</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="c1"># pull official base image
</span><span class="n">FROM</span> <span class="n">python</span><span class="p">:</span><span class="mf">3.7</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="n">alpine</span>

<span class="c1"># set work directory
</span><span class="n">WORKDIR</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span>

<span class="c1"># set environment variables
</span><span class="n">ENV</span> <span class="n">PYTHONDONTWRITEBYTECODE</span> <span class="mi">1</span>
<span class="n">ENV</span> <span class="n">PYTHONUNBUFFERED</span> <span class="mi">1</span>

<span class="c1"># install psycopg2 dependencies
</span><span class="n">RUN</span> <span class="n">apk</span> <span class="n">update</span> <span class="o">&amp;&amp;</span> <span class="n">apk</span> <span class="n">add</span> <span class="n">postgresql</span><span class="o">-</span><span class="n">dev</span> <span class="n">gcc</span> <span class="n">python3</span><span class="o">-</span><span class="n">dev</span> <span class="n">musl</span><span class="o">-</span><span class="n">dev</span>

<span class="c1"># install dependencies
</span><span class="n">RUN</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="n">pip</span>
<span class="n">COPY</span> <span class="p">.</span><span class="o">/</span><span class="n">requirements</span><span class="p">.</span><span class="n">txt</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">requirements</span><span class="p">.</span><span class="n">txt</span>
<span class="n">RUN</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">r</span> <span class="n">requirements</span><span class="p">.</span><span class="n">txt</span>

<span class="c1"># copy project
</span><span class="n">COPY</span> <span class="p">.</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span><span class="o">/</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>And last step, we will need to add Psycopg2 to our requirements.txt</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Django==2.2.9
psycopg2-binary==2.8.3
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We have to build our docker and run the migrations</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>docker-compose build
docker-compose up <span class="nt">-d</span>
docker-compose <span class="nb">exec </span>web python manage.py migrate <span class="nt">--noinput</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>To be sure that the django table are properly created, just run</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre>docker-compose <span class="nb">exec </span>db psql <span class="nt">--username</span><span class="o">=</span>hello_django <span class="nt">--dbname</span><span class="o">=</span>hello_django_dev

psql <span class="o">(</span>12.0<span class="o">)</span>
Type <span class="s2">"help"</span> <span class="k">for </span>help.

<span class="nv">hello_django_dev</span><span class="o">=</span><span class="c"># \l</span>
List of databases
Name | Owner | Encoding | Collate | Ctype | Access privileges
<span class="nt">------------------</span>+--------------+----------+------------+------------+-------------------------------
hello_django_dev | hello_django | UTF8 | en_US.utf8 | en_US.utf8 |
postgres | hello_django | UTF8 | en_US.utf8 | en_US.utf8 |
template0 | hello_django | UTF8 | en_US.utf8 | en_US.utf8 | <span class="o">=</span>c/hello_django +
| | | | | <span class="nv">hello_django</span><span class="o">=</span>CTc/hello_django
template1 | hello_django | UTF8 | en_US.utf8 | en_US.utf8 | <span class="o">=</span>c/hello_django +
| | | | | <span class="nv">hello_django</span><span class="o">=</span>CTc/hello_django
<span class="o">(</span>4 rows<span class="o">)</span>

<span class="nv">hello_django_dev</span><span class="o">=</span><span class="c"># \c hello_django_dev</span>
You are now connected to database <span class="s2">"hello_django_dev"</span> as user <span class="s2">"hello_django"</span><span class="nb">.</span>

<span class="nv">hello_django_dev</span><span class="o">=</span><span class="c"># \dt</span>
List of relations
Schema | Name | Type | Owner
<span class="nt">--------</span>+----------------------------+-------+--------------
public | auth_group | table | hello_django
public | auth_group_permissions | table | hello_django
public | auth_permission | table | hello_django
public | auth_user | table | hello_django
public | auth_user_groups | table | hello_django
public | auth_user_user_permissions | table | hello_django
public | django_admin_log | table | hello_django
public | django_content_type | table | hello_django
public | django_migrations | table | hello_django
public | django_session | table | hello_django
<span class="o">(</span>10 rows<span class="o">)</span>

<span class="nv">hello_django_dev</span><span class="o">=</span><span class="c"># \q</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="define-entrypointsh">Define entrypoint.sh</h2>

<p>To check if the Postgres DB is healthy we will add a entrypoint.sh. It will helps us to not run migrations on unhealthy DB. Create this file in te ‚Äúapp‚Äù folder and copy/paste those lines.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/sh</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$DATABASE</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"postgres"</span> <span class="o">]</span>
<span class="k">then
</span><span class="nb">echo</span> <span class="s2">"Waiting for postgres..."</span>

    <span class="k">while</span> <span class="o">!</span> nc <span class="nt">-z</span> <span class="nv">$SQL_HOST</span> <span class="nv">$SQL_PORT</span><span class="p">;</span> <span class="k">do
      </span><span class="nb">sleep </span>0.1
    <span class="k">done

    </span><span class="nb">echo</span> <span class="s2">"PostgreSQL started"</span>

<span class="k">fi

</span>python manage.py flush <span class="nt">--no-input</span>
python manage.py migrate

<span class="nb">exec</span> <span class="s2">"</span><span class="se">\$</span><span class="s2">@"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>you now need to change the permissions on the file by <code class="highlighter-rouge">chmod +x app/entrypoint.sh</code>. Now we can update the Dockerfile to copy over the entrypoint.sh</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="c1"># pull official base image
</span><span class="n">FROM</span> <span class="n">python</span><span class="p">:</span><span class="mf">3.7</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="n">alpine</span>

<span class="c1"># set work directory
</span><span class="n">WORKDIR</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span>

<span class="c1"># set environment variables
</span><span class="n">ENV</span> <span class="n">PYTHONDONTWRITEBYTECODE</span> <span class="mi">1</span>
<span class="n">ENV</span> <span class="n">PYTHONUNBUFFERED</span> <span class="mi">1</span>

<span class="c1"># install psycopg2 dependencies
</span><span class="n">RUN</span> <span class="n">apk</span> <span class="n">update</span> <span class="o">&amp;&amp;</span> <span class="n">apk</span> <span class="n">add</span> <span class="n">postgresql</span><span class="o">-</span><span class="n">dev</span> <span class="n">gcc</span> <span class="n">python3</span><span class="o">-</span><span class="n">dev</span> <span class="n">musl</span><span class="o">-</span><span class="n">dev</span>

<span class="c1"># install dependencies
</span><span class="n">RUN</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="n">pip</span>
<span class="n">COPY</span> <span class="p">.</span><span class="o">/</span><span class="n">requirements</span><span class="p">.</span><span class="n">txt</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">requirements</span><span class="p">.</span><span class="n">txt</span>
<span class="n">RUN</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">r</span> <span class="n">requirements</span><span class="p">.</span><span class="n">txt</span>

<span class="c1"># copy entrypoint.sh
</span><span class="n">COPY</span> <span class="p">.</span><span class="o">/</span><span class="n">entrypoint</span><span class="p">.</span><span class="n">sh</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">entrypoint</span><span class="p">.</span><span class="n">sh</span>

<span class="c1"># copy project
</span><span class="n">COPY</span> <span class="p">.</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span><span class="o">/</span>

<span class="c1"># run entrypoint.sh
</span><span class="n">ENTRYPOINT</span> <span class="p">[</span><span class="s">"/usr/src/app/entrypoint.sh"</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We will add the DB to the env.dev file</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>DEBUG=1
SECRET_KEY=foo
DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]
SQL_ENGINE=django.db.backends.postgresql
SQL_DATABASE=hello_django_dev
SQL_USER=hello_django
SQL_PASSWORD=hello_django
SQL_HOST=db
SQL_PORT=5432
DATABASE=postgres
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Okay so lets rebuild our docker image and run the container</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>docker-compose up <span class="nt">-d</span> <span class="nt">--build</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>If you navigate to <a href="http://localhost:8000/">http://localhost:8000/</a> you should see again the Django Welcome page :-). Well done, your Django in a Docker works perfectly for development environment</p>

<h2 id="lets-configure-it-to-be-ready-for-production">Lets configure it to be ready for Production</h2>

<h3 id="gunicorn">Gunicorn</h3>

<p>In our requirements.txt, lets add the Gunicorn reference</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>Django==2.2.9
gunicorn==19.9.0
psycopg2-binary==2.8.3
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Since we still want to use Django‚Äôs built-in server in development, create a new compose file called docker-compose.prod.yml for production</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre>version: '3.7'

services:
web:
build:
context: ./app
dockerfile: Dockerfile.prod
command: gunicorn hello_django.wsgi:application --bind 0.0.0.0:8000
ports: - 8000:8000
env_file: - ./.env.prod
depends_on: - db
db:
image: postgres:12.0-alpine
volumes: - postgres_data:/var/lib/postgresql/data/
env_file: - ./.env.prod.db

volumes:
postgres_data:
</pre></td></tr></tbody></table></code></pre></div></div>

<p>As you can see in the docker-compose.prod.yml we have define a .env.prod and a .env.prod.db files to store all the varaible relative to the production. Lets create this file in the ‚Äúdjango-in-a-docker‚Äù directory and write that</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre># .env.prod

DEBUG=0
SECRET_KEY=change_me
DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]
SQL_ENGINE=django.db.backends.postgresql
SQL_DATABASE=hello_django_prod
SQL_USER=hello_django
SQL_PASSWORD=hello_django
SQL_HOST=db
SQL_PORT=5432
DATABASE=postgres
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre># .env.prod.db

POSTGRES_USER=hello_django
POSTGRES_PASSWORD=hello_django
POSTGRES_DB=hello_django_prod
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Lets create the Production Docker file now. First we need to create our entrypoint.prod.sh and as previously update the permissions on it <code class="highlighter-rouge">chmod +x app/entrypoint.prod.sh</code></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/sh</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$DATABASE</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"postgres"</span> <span class="o">]</span>
<span class="k">then
</span><span class="nb">echo</span> <span class="s2">"Waiting for postgres..."</span>

    <span class="k">while</span> <span class="o">!</span> nc <span class="nt">-z</span> <span class="nv">$SQL_HOST</span> <span class="nv">$SQL_PORT</span><span class="p">;</span> <span class="k">do
      </span><span class="nb">sleep </span>0.1
    <span class="k">done

    </span><span class="nb">echo</span> <span class="s2">"PostgreSQL started"</span>

<span class="k">fi

</span><span class="nb">exec</span> <span class="s2">"</span><span class="se">\$</span><span class="s2">@"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>To use this file, create a new Dockerfile called Dockerfile.prod for use with production builds</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
</pre></td><td class="rouge-code"><pre><span class="c1">###########
# BUILDER
###########
</span>
<span class="c1"># pull official base image
</span><span class="n">FROM</span> <span class="n">python</span><span class="p">:</span><span class="mf">3.7</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="n">alpine</span> <span class="k">as</span> <span class="n">builder</span>

<span class="c1"># set work directory
</span><span class="n">WORKDIR</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span>

<span class="c1"># set environment variables
</span><span class="n">ENV</span> <span class="n">PYTHONDONTWRITEBYTECODE</span> <span class="mi">1</span>
<span class="n">ENV</span> <span class="n">PYTHONUNBUFFERED</span> <span class="mi">1</span>

<span class="c1"># install psycopg2 dependencies
</span><span class="n">RUN</span> <span class="n">apk</span> <span class="n">update</span> <span class="o">&amp;&amp;</span> <span class="n">apk</span> <span class="n">add</span> <span class="n">postgresql</span><span class="o">-</span><span class="n">dev</span> <span class="n">gcc</span> <span class="n">python3</span><span class="o">-</span><span class="n">dev</span> <span class="n">musl</span><span class="o">-</span><span class="n">dev</span>

<span class="c1"># lint
</span><span class="n">RUN</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="n">pip</span>
<span class="n">RUN</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">flake8</span>
<span class="n">COPY</span> <span class="p">.</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span><span class="o">/</span>
<span class="n">RUN</span> <span class="n">flake8</span> <span class="o">--</span><span class="n">ignore</span><span class="o">=</span><span class="n">E501</span><span class="p">,</span><span class="n">F401</span> <span class="p">.</span>

<span class="c1"># install dependencies
</span><span class="n">COPY</span> <span class="p">.</span><span class="o">/</span><span class="n">requirements</span><span class="p">.</span><span class="n">txt</span> <span class="p">.</span>
<span class="n">RUN</span> <span class="n">pip</span> <span class="n">wheel</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">cache</span><span class="o">-</span><span class="nb">dir</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">deps</span> <span class="o">--</span><span class="n">wheel</span><span class="o">-</span><span class="nb">dir</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">wheels</span> <span class="o">-</span><span class="n">r</span> <span class="n">requirements</span><span class="p">.</span><span class="n">txt</span>

<span class="c1">#########
# FINAL
#########
</span>
<span class="c1"># pull official base image
</span><span class="n">FROM</span> <span class="n">python</span><span class="p">:</span><span class="mf">3.7</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="n">alpine</span>

<span class="c1"># create directory for the app user
</span><span class="n">RUN</span> <span class="n">mkdir</span> <span class="o">-</span><span class="n">p</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">app</span>

<span class="c1"># create the app user
</span><span class="n">RUN</span> <span class="n">addgroup</span> <span class="o">-</span><span class="n">S</span> <span class="n">app</span> <span class="o">&amp;&amp;</span> <span class="n">adduser</span> <span class="o">-</span><span class="n">S</span> <span class="n">app</span> <span class="o">-</span><span class="n">G</span> <span class="n">app</span>

<span class="c1"># create the appropriate directories
</span><span class="n">ENV</span> <span class="n">HOME</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">app</span>
<span class="n">ENV</span> <span class="n">APP_HOME</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">web</span>
<span class="n">RUN</span> <span class="n">mkdir</span> <span class="err">$</span><span class="n">APP_HOME</span>
<span class="n">WORKDIR</span> <span class="err">$</span><span class="n">APP_HOME</span>

<span class="c1"># install dependencies
</span><span class="n">RUN</span> <span class="n">apk</span> <span class="n">update</span> <span class="o">&amp;&amp;</span> <span class="n">apk</span> <span class="n">add</span> <span class="n">libpq</span>
<span class="n">COPY</span> <span class="o">--</span><span class="k">from</span><span class="o">=</span><span class="n">builder</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">wheels</span> <span class="o">/</span><span class="n">wheels</span>
<span class="n">COPY</span> <span class="o">--</span><span class="k">from</span><span class="o">=</span><span class="n">builder</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">requirements</span><span class="p">.</span><span class="n">txt</span> <span class="p">.</span>
<span class="n">RUN</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="n">pip</span>
<span class="n">RUN</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">cache</span> <span class="o">/</span><span class="n">wheels</span><span class="o">/</span>\<span class="o">*</span>

<span class="c1"># copy entrypoint-prod.sh
</span><span class="n">COPY</span> <span class="p">.</span><span class="o">/</span><span class="n">entrypoint</span><span class="p">.</span><span class="n">prod</span><span class="p">.</span><span class="n">sh</span> \<span class="err">$</span><span class="n">APP_HOME</span>

<span class="c1"># copy project
</span><span class="n">COPY</span> <span class="p">.</span> \<span class="err">$</span><span class="n">APP_HOME</span>

<span class="c1"># chown all the files to the app user
</span><span class="n">RUN</span> <span class="n">chown</span> <span class="o">-</span><span class="n">R</span> <span class="n">app</span><span class="p">:</span><span class="n">app</span> \<span class="err">$</span><span class="n">APP_HOME</span>

<span class="c1"># change to the app user
</span><span class="n">USER</span> <span class="n">app</span>

<span class="c1"># run entrypoint.prod.sh
</span><span class="n">ENTRYPOINT</span> <span class="p">[</span><span class="s">"/home/app/web/entrypoint.prod.sh"</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="nginx">Nginx</h3>

<p>We need to add this service to our docker-compose.proc.yml</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre>version: '3.7'

services:
web:
build:
context: ./app
dockerfile: Dockerfile.prod
command: gunicorn hello_django.wsgi:application --bind 0.0.0.0:8000
ports: - 8000:8000
env_file: - ./.env.prod
depends_on: - db
db:
image: postgres:12.0-alpine
volumes: - postgres_data:/var/lib/postgresql/data/
env_file: - ./.env.prod.db
nginx:
build: ./nginx
ports: - 1337:80
depends_on: - web

volumes:
postgres_data:
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Lets create in the django-in-a-docker directory a new folder called ‚Äúnginx‚Äù which will contains two files. one Dockerfile and one nginx.conf</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="c1"># Dockerfile
</span>
<span class="n">FROM</span> <span class="n">nginx</span><span class="p">:</span><span class="mf">1.17</span><span class="p">.</span><span class="mi">4</span><span class="o">-</span><span class="n">alpine</span>

<span class="n">RUN</span> <span class="n">rm</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">conf</span><span class="p">.</span><span class="n">d</span><span class="o">/</span><span class="n">default</span><span class="p">.</span><span class="n">conf</span>
<span class="n">COPY</span> <span class="n">nginx</span><span class="p">.</span><span class="n">conf</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">conf</span><span class="p">.</span><span class="n">d</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c1"># nginx.conf:
</span><span class="n">upstream</span> <span class="n">hello_django</span> <span class="p">{</span>
<span class="n">server</span> <span class="n">web</span><span class="p">:</span><span class="mi">8000</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">server</span> <span class="p">{</span>
    <span class="n">listen</span> <span class="mi">80</span><span class="p">;</span>
    <span class="n">location</span> <span class="o">/</span> <span class="p">{</span>
        <span class="n">proxy_pass</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">hello_django</span><span class="p">;</span>
        <span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="n">Forwarded</span><span class="o">-</span><span class="n">For</span> <span class="err">$</span><span class="n">proxy_add_x_forwarded_for</span><span class="p">;</span>
        <span class="n">proxy_set_header</span> <span class="n">Host</span> <span class="err">$</span><span class="n">host</span><span class="p">;</span>
        <span class="n">proxy_redirect</span> <span class="n">off</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>now we need to update our docker-compose.prod.yml to take this change into account</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre>version: '3.7'

services:
web:
build:
context: ./app
dockerfile: Dockerfile.prod
command: gunicorn hello_django.wsgi:application --bind 0.0.0.0:8000
expose: - 8000
env_file: - ./.env.prod
depends_on: - db
db:
image: postgres:12.0-alpine
volumes: - postgres_data:/var/lib/postgresql/data/
env_file: - ./.env.prod.db
nginx:
build: ./nginx
ports: - 1337:80
depends_on: - web

volumes:
postgres_data:
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now our app should be like that</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre>‚îú‚îÄ‚îÄ .env.dev
‚îú‚îÄ‚îÄ .env.prod
‚îú‚îÄ‚îÄ .env.prod.db
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ app
‚îÇ ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ ‚îú‚îÄ‚îÄ Dockerfile.prod
‚îÇ ‚îú‚îÄ‚îÄ entrypoint.prod.sh
‚îÇ ‚îú‚îÄ‚îÄ entrypoint.sh
‚îÇ ‚îú‚îÄ‚îÄ hello_django
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ <span class="k">**</span>init<span class="k">**</span>.py
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ settings.py
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ urls.py
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ wsgi.py
‚îÇ ‚îú‚îÄ‚îÄ manage.py
‚îÇ ‚îî‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ docker-compose.prod.yml
‚îú‚îÄ‚îÄ docker-compose.yml
‚îî‚îÄ‚îÄ nginx
‚îú‚îÄ‚îÄ Dockerfile
‚îî‚îÄ‚îÄ nginx.conf
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="static-files">Static files</h2>

<h3 id="how-to-configure-the-development-environment">How to configure the development environment</h3>

<p>Lets update the settings.py</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">STATIC_URL</span> <span class="o">=</span> <span class="s">"/staticfiles/"</span>
<span class="n">STATIC_ROOT</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">"staticfiles"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We can now update the entrypoint.sh in order to collect all the static files</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/sh</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$DATABASE</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"postgres"</span> <span class="o">]</span>
<span class="k">then
</span><span class="nb">echo</span> <span class="s2">"Waiting for postgres..."</span>

    <span class="k">while</span> <span class="o">!</span> nc <span class="nt">-z</span> <span class="nv">$SQL_HOST</span> <span class="nv">$SQL_PORT</span><span class="p">;</span> <span class="k">do
      </span><span class="nb">sleep </span>0.1
    <span class="k">done

    </span><span class="nb">echo</span> <span class="s2">"PostgreSQL started"</span>

<span class="k">fi

</span>python manage.py flush <span class="nt">--no-input</span>
python manage.py migrate
python manage.py collectstatic <span class="nt">--no-input</span> <span class="nt">--clear</span>

<span class="nb">exec</span> <span class="s2">"</span><span class="se">\$</span><span class="s2">@"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="how-to-configure-the-production-environment">How to configure the production environment</h3>

<p>For production, add a volume to the web and nginx services in docker-compose.prod.yml so that each container will share a directory named ‚Äústaticfiles‚Äù:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre>version: '3.7'

services:
web:
build:
context: ./app
dockerfile: Dockerfile.prod
command: gunicorn hello_django.wsgi:application --bind 0.0.0.0:8000
volumes: - static_volume:/home/app/web/staticfiles
expose: - 8000
env_file: - ./.env.prod
depends_on: - db
db:
image: postgres:12.0-alpine
volumes: - postgres_data:/var/lib/postgresql/data/
env_file: - ./.env.prod.db
nginx:
build: ./nginx
volumes: - static_volume:/home/app/web/staticfiles
ports: - 1337:80
depends_on: - web

volumes:
postgres_data:
static_volume:
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We need to also create the ‚Äú/home/app/web/staticfiles‚Äù folder in Dockerfile.prod:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="p">...</span>

<span class="c1"># create the appropriate directories
</span>
<span class="n">ENV</span> <span class="n">HOME</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">app</span>
<span class="n">ENV</span> <span class="n">APP_HOME</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">web</span>
<span class="n">RUN</span> <span class="n">mkdir</span> <span class="err">$</span><span class="n">APP_HOME</span>
<span class="n">RUN</span> <span class="n">mkdir</span> <span class="err">$</span><span class="n">APP_HOME</span><span class="o">/</span><span class="n">staticfiles</span>
<span class="n">WORKDIR</span> \<span class="err">$</span><span class="n">APP_HOME</span>

<span class="p">...</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now we have to update our Nginx configuration to route static file requests to the staticfiles folder</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre>upstream hello_django {
server web:8000;
}

server {
    listen 80;
    location / {
        proxy_pass http://hello_django;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;
    }
    location /staticfiles/ {
        alias /home/app/web/staticfiles/;
    }
}
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now lets try our code in the production environment</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>docker-compose down <span class="nt">-v</span>
docker-compose <span class="nt">-f</span> docker-compose.prod.yml up <span class="nt">-d</span> <span class="nt">--build</span>
docker-compose <span class="nt">-f</span> docker-compose.prod.yml <span class="nb">exec </span>web python manage.py migrate <span class="nt">--noinput</span>
docker-compose <span class="nt">-f</span> docker-compose.prod.yml <span class="nb">exec </span>web python manage.py collectstatic <span class="nt">--no-input</span> <span class="nt">--clear</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now if you go to <a href="http://localhost:1337/admin">http://localhost:1337/admin</a> you should css the proper Django admin login page with the default django css apply. Well done you have finished the configuration of your Django application.</p>

<p>You will be able to find the code <a href="https://github.com/dianedelallee/django-in-a-docker">here</a></p>

<h2 id="references">References</h2>

<ul>
  <li><strong>Alpine-base Docker image:</strong> <a href="https://github.com/gliderlabs/docker-alpine">Docker-Alpine</a></li>
  <li><strong>Docker Working Directory:</strong> <a href="https://docs.docker.com/engine/reference/builder/#workdir">WORKDIR</a></li>
  <li><strong>Docker for Python Developers:</strong> <a href="https://mherman.org/presentations/dockercon-2018/#1">slides - help you to construct your DockerFiles</a></li>
  <li><strong>Gunicorn:</strong> <a href="https://gunicorn.org/">doc</a></li>
  <li><strong>Nginx:</strong> <a href="https://www.nginx.com/resources/glossary/reverse-proxy-server/">doc</a></li>
</ul>
:ET