I"<p>When you start a new python project, it is quite important to have a proper environment.
With Pipenv, it is quite easy to create a virtual environment, install libraries and manage the version of those libraries.</p>

<p>As I am using Brew, it is easy to install and to use.
Let‚Äôs see that.</p>

<h2 id="installation">Installation</h2>

<p><code class="highlighter-rouge">brew install pipenv</code></p>

<h2 id="new-project-and-pipenv-workflow">New project and Pipenv workflow</h2>

<p>My new project is in ~/Desktop/development/my_project</p>

<p><code class="highlighter-rouge">cd ~/Desktop/development/my_project</code></p>

<p>I want to create my Pipfile (to know which libraries are installed with which a specific version).</p>

<p>Let‚Äôs call Pipenv to install the requests library.</p>

<p><code class="highlighter-rouge">pipenv install requests</code></p>

<p>you should see</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre>Creating a virtualenv <span class="k">for </span>this project‚Ä¶
Pipfile: ~/Desktop/development/my_project/Pipfile
Using /usr/local/Cellar/pipenv/2018.11.26/libexec/bin/python3.7 <span class="o">(</span>3.7.1<span class="o">)</span> to create virtualenv‚Ä¶
‚†á Creating virtual environment...Already using interpreter /usr/local/Cellar/pipenv/2018.11.26/libexec/bin/python3.7
Using real prefix <span class="s1">'/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7'</span>
New python executable <span class="k">in</span> /Users/ddelalle/.local/share/virtualenvs/dev_test_example-5dI9ifch/bin/python3.7
Also creating executable <span class="k">in</span> /Users/ddelalle/.local/share/virtualenvs/dev_test_example-5dI9ifch/bin/python
Installing setuptools, pip, wheel...
<span class="k">done</span><span class="nb">.</span>

‚úî Successfully created virtual environment!
Virtualenv location: /Users/ddelalle/.local/share/virtualenvs/my_project-5dI9ifch
Creating a Pipfile <span class="k">for </span>this project‚Ä¶
Installing requests‚Ä¶
Adding requests to Pipfile<span class="s1">'s [packages]‚Ä¶
‚úî Installation Succeeded
Pipfile.lock not found, creating‚Ä¶
Locking [dev-packages] dependencies‚Ä¶
Locking [packages] dependencies‚Ä¶
‚úî Success!
Updated Pipfile.lock (444a6d)!
Installing dependencies from Pipfile.lock (444a6d)‚Ä¶
  üêç   ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ 5/5 ‚Äî 00:00:03
To activate this project'</span>s virtualenv, run pipenv shell.
Alternatively, run a <span class="nb">command </span>inside the virtualenv with pipenv run.
</pre></td></tr></tbody></table></code></pre></div></div>

<p>If you check you will now have a Pipfile in your repository.
Now, I want to run my virtual env and start to work on my project.</p>

<p><code class="highlighter-rouge">pipenv shell</code></p>

<p>you should see</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Launching subshell <span class="k">in </span>virtual environment‚Ä¶
 <span class="nb">.</span> /Users/ddelalle/.local/share/virtualenvs/my_project-5dI9ifch/bin/activate
</pre></td></tr></tbody></table></code></pre></div></div>

<p>That is it! You now have a proper environment to work.
If you need to exit your virtual env, just write</p>

<p><code class="highlighter-rouge">exit</code></p>

<p>You can find more explanation and more configuration in the <a href="https://pipenv.pypa.io/en/latest/basics/">Pipenv project page</a>.</p>
:ET